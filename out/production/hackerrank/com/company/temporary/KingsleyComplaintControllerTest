import com.lbt.icon.bankcrm.domain.complaint.complaintresponse.ComplaintResponseService;
import com.lbt.icon.bankcrm.domain.complaint.complaintresponse.dto.CreateComplaintResponseDto;
import com.lbt.icon.bankcrm.domain.complaint.complaintresponse.dto.QueryComplaintResponseDto;
import com.lbt.icon.bankcrm.domain.complaint.dto.CreateComplaintDto;
import com.lbt.icon.bankcrm.domain.complaint.dto.QueryComplaintDto;
import com.lbt.icon.bankcrm.domain.customer.CustomerType;
import com.lbt.icon.core.util.CoreUtil;
import com.lbt.icon.lbttest.domain.SecurityTestUtil;
import org.hamcrest.Matchers;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.RequestPostProcessor;
import javax.transaction.Transactional;
import static com.lbt.icon.core.util.CoreUtil.objToJsonString;
import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
/**
 * @author Kingsley Ezenwere
 * @since 14/03/2019
 */
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@AutoConfigureMockMvc
@SpringBootTest()
class ComplaintControllerTest {
    private static final String API_ROOT_URL = "/v1/complaints";
    private RequestPostProcessor requestPostProcessor;
    private RequestPostProcessor requestPostProcessor_approver;
    @Autowired
    private SecurityTestUtil securityTestUtil;
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ComplaintService complaintService;
    @Autowired
    private ComplaintResponseService complaintResponseService;
    private CreateComplaintDto createComplaintDto;
    private CreateComplaintResponseDto createComplaintResponseDto;
    @BeforeAll
    public void beforeAll() throws Exception {
        final String USER_N = "SUPERADMIN1";
        final String USER_P = "Icon@1234";
        final String USER_1_N = "SUPERADMIN2";
        final String USER_1_P = "Icon@1234";
        requestPostProcessor = securityTestUtil.bearerToken(USER_N, USER_P);
        requestPostProcessor_approver = securityTestUtil.bearerToken(USER_1_N, USER_1_P);
    }
    @BeforeEach
    public void setUp() {
//         authToken = authToken.length() < 10 ? util.getAUTH_TOKEN() : authToken;
        createComplaintDto = SecurityTestUtil.fillObject(CreateComplaintDto.class);
        createComplaintResponseDto = SecurityTestUtil.fillObject(CreateComplaintResponseDto.class);
    }
    @Transactional
    @Test
    public void testCreate() throws Exception {
        mockMvc.perform(post(API_ROOT_URL)
                .with(requestPostProcessor)
                .contentType(MediaType.APPLICATION_JSON)
                .characterEncoding("UTF-8")
                .content(objToJsonString(createComplaintDto)))
                .andDo(print())
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.response.customerId", Matchers.is(CoreUtil.toUpper(createComplaintDto.getCustomerId()))))
                .andExpect(jsonPath("$.response.id").value(notNullValue()));
    }
    @Disabled
    @Transactional
    @Test
    public void testGetOne() throws Exception {
        // PREPARE
        final QueryComplaintDto queryComplaintDto = complaintService.create(createComplaintDto);
        createComplaintResponseDto.setComplaintId(queryComplaintDto.getComplaintId());
        complaintResponseService.create(createComplaintResponseDto);
        // ACT & ASSERT
        mockMvc.perform(get(API_ROOT_URL + "/{complaintId}", queryComplaintDto.getId())
                .with(requestPostProcessor)
                .contentType(MediaType.APPLICATION_JSON)
                .characterEncoding("UTF-8")
                .content(""))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.response.complaintResponses", hasSize(greaterThanOrEqualTo(1))))
                .andExpect(jsonPath("$.response.customerId", Matchers.is(CoreUtil.toUpper(createComplaintDto.getCustomerId()))))
                .andExpect(jsonPath("$.response.id").value(notNullValue()));
    }
    @Disabled
    @Transactional
    @Test
    public void testGetComplaintResponse() throws Exception {
        // PREPARE
        final QueryComplaintDto queryComplaintDto = complaintService.create(createComplaintDto);
        createComplaintResponseDto.setComplaintId(queryComplaintDto.getComplaintId());
        QueryComplaintResponseDto queryComplaintResponseDto = complaintResponseService.create(createComplaintResponseDto);
        // ACT & ASSERT
        mockMvc.perform(get(API_ROOT_URL + "/{complaintId}/responses", queryComplaintDto.getComplaintId())
                .with(requestPostProcessor)
                .contentType(MediaType.APPLICATION_JSON)
                .characterEncoding("UTF-8")
                .content(""))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.response.numberOfElements", greaterThanOrEqualTo(1)));
//                .andExpect(jsonPath("$.response.complaintId", Matchers.is(CoreUtil.toUpper(queryComplaintResponseDto.getComplaintId()))))
//                .andExpect(jsonPath("$.response.customerId", Matchers.is(CoreUtil.toUpper(createComplaintDto.getCustomerId()))))
//                .andExpect(jsonPath("$.response.id").value(notNullValue()));
    }
    @Disabled
    @Transactional
    @Test
    public void testGetAll() throws Exception {
        complaintService.create(createComplaintDto);
        mockMvc.perform(get(API_ROOT_URL + "/search")
                .with(requestPostProcessor)
                .contentType(MediaType.APPLICATION_JSON)
                .characterEncoding("UTF-8")
                .content(""))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.response.numberOfElements", greaterThanOrEqualTo(1)));
    }
    @Transactional
    @Test
    public void testUpdate() throws Exception {
        final String newCustomerType = CustomerType.RETAIL.toString();
        final QueryComplaintDto queryComplaintDto = complaintService.create(createComplaintDto);
        createComplaintDto.setCustomerType(CustomerType.RETAIL);
        mockMvc.perform(put(API_ROOT_URL + "/{complaintId}", queryComplaintDto.getId())
                .with(requestPostProcessor)
                .contentType(MediaType.APPLICATION_JSON)
                .characterEncoding("UTF-8")
                .content(objToJsonString(createComplaintDto)))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.response.customerType", Matchers.is((newCustomerType))))
                .andExpect(jsonPath("$.response.id").value(notNullValue()));
    }
    @Transactional
    @Test()
    public void testDelete() throws Exception {
        final QueryComplaintDto queryComplaintDto = complaintService.create(createComplaintDto);
        mockMvc.perform(delete(API_ROOT_URL + "/{complaintId}", queryComplaintDto.getId())
                .with(requestPostProcessor)
                .contentType(MediaType.APPLICATION_JSON)
                .characterEncoding("UTF-8")
                .content(""))
                .andDo(print())
                .andExpect(status().isNoContent());
    }
}